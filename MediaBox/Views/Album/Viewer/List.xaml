<UserControl
	x:Class="SandBeige.MediaBox.Views.Album.Viewer.List"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:behaviors="clr-namespace:SandBeige.MediaBox.Controls.Behaviors;assembly=MediaBox.Controls"
	xmlns:cap="clr-namespace:SandBeige.MediaBox.Controls.AttachedProperties;assembly=MediaBox.Controls"
	xmlns:controls="clr-namespace:SandBeige.MediaBox.Controls.Controls;assembly=MediaBox.Controls"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:enum="clr-namespace:SandBeige.MediaBox.Composition.Enum;assembly=MediaBox.Composition"
	xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
	xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:mediaVm="clr-namespace:SandBeige.MediaBox.ViewModels.Media"
	xmlns:viewerVm="clr-namespace:SandBeige.MediaBox.ViewModels.Album.Viewer"
	d:DataContext="{d:DesignInstance viewerVm:ListViewerViewModel}"
	d:DesignHeight="450"
	d:DesignWidth="800"
	mc:Ignorable="d">
	<i:Interaction.Triggers>
		<l:InteractionMessageTrigger Messenger="{Binding Messenger}">
			<l:TransitionInteractionMessageAction />
		</l:InteractionMessageTrigger>
	</i:Interaction.Triggers>
	<controls:TwoWayBindableSelectedItemsMediaListView
		Name="ListBox"
		Background="Transparent"
		BindableSelectedItems="{Binding AlbumViewModel.SelectedMediaFiles.Value}"
		BorderThickness="0"
		ItemsSource="{Binding AlbumViewModel.Items}"
		ScrollViewer.IsDeferredScrollingEnabled="True"
		SelectionMode="Extended">
		<ListView.Resources>
			<Style BasedOn="{StaticResource StandardGridViewColumnHeader}" TargetType="GridViewColumnHeader">
				<Setter Property="BorderBrush" Value="{DynamicResource Brush.Common.Border.Normal}" />
				<Setter Property="BorderThickness" Value="0,0,0,1" />
			</Style>
		</ListView.Resources>
		<ListView.View>
			<GridView cap:GridViewColumns.AlternateKeyMember="AlternateKey" cap:GridViewColumns.ColumnsSource="{Binding Columns}">
				<GridView.ColumnHeaderContextMenu>
					<ContextMenu>
						<MenuItem Command="{Binding OpenColumnSettingsWindowCommand}" Header="表示列の設定" />
					</ContextMenu>
				</GridView.ColumnHeaderContextMenu>
				<cap:GridViewColumns.GridViewColumnTemplates>
					<cap:AlternateGridViewColumnCollection d:DataContext="{d:DesignInstance mediaVm:ImageFileViewModel}">
						<cap:AlternateGridViewColumn
							Width="200"
							AlternateKey="{x:Static enum:AvailableColumns.Thumbnail}"
							Header="{Binding AlternateKey, RelativeSource={RelativeSource Self}, Converter={StaticResource AvailableColumnsToStringConverter}}">
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<Grid>
										<TextBlock />
										<Image Width="{Binding DataContext.AlbumViewModel.ZoomLevel.Value, RelativeSource={RelativeSource AncestorType={x:Type controls:TwoWayBindableSelectedItemsMediaListView}}, Converter={StaticResource ZoomLevelToImageSideLengthConverter}}" Height="{Binding DataContext.AlbumViewModel.ZoomLevel.Value, RelativeSource={RelativeSource AncestorType={x:Type controls:TwoWayBindableSelectedItemsMediaListView}}, Converter={StaticResource ZoomLevelToImageSideLengthConverter}}">
											<Image.Source>
												<MultiBinding Converter="{StaticResource DecodeImageConverter}">
													<Binding Path="ThumbnailFilePath" />
													<Binding Source="{x:Null}" />
												</MultiBinding>
											</Image.Source>
										</Image>
									</Grid>
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</cap:AlternateGridViewColumn>
						<cap:AlternateGridViewColumn
							Width="200"
							AlternateKey="{x:Static enum:AvailableColumns.FileName}"
							Header="{Binding AlternateKey, RelativeSource={RelativeSource Self}, Converter={StaticResource AvailableColumnsToStringConverter}}">
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<TextBlock Text="{Binding FileName}" ToolTip="{Binding FilePath}" />
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</cap:AlternateGridViewColumn>
						<cap:AlternateGridViewColumn
							Width="200"
							AlternateKey="{x:Static enum:AvailableColumns.FilePath}"
							Header="{Binding AlternateKey, RelativeSource={RelativeSource Self}, Converter={StaticResource AvailableColumnsToStringConverter}}">
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<TextBlock Text="{Binding FilePath}" />
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</cap:AlternateGridViewColumn>
						<cap:AlternateGridViewColumn
							Width="200"
							AlternateKey="{x:Static enum:AvailableColumns.FileSize}"
							Header="{Binding AlternateKey, RelativeSource={RelativeSource Self}, Converter={StaticResource AvailableColumnsToStringConverter}}">
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<TextBlock Text="{Binding FileSize, Converter={StaticResource FileSizeConverter}}" />
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</cap:AlternateGridViewColumn>
						<cap:AlternateGridViewColumn
							Width="200"
							AlternateKey="{x:Static enum:AvailableColumns.CreationTime}"
							Header="{Binding AlternateKey, RelativeSource={RelativeSource Self}, Converter={StaticResource AvailableColumnsToStringConverter}}">
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<TextBlock Text="{Binding CreationTime}" />
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</cap:AlternateGridViewColumn>
						<cap:AlternateGridViewColumn
							Width="200"
							AlternateKey="{x:Static enum:AvailableColumns.ModifiedTime}"
							Header="{Binding AlternateKey, RelativeSource={RelativeSource Self}, Converter={StaticResource AvailableColumnsToStringConverter}}">
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<TextBlock Text="{Binding ModifiedTime}" />
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</cap:AlternateGridViewColumn>
						<cap:AlternateGridViewColumn
							Width="200"
							AlternateKey="{x:Static enum:AvailableColumns.LastAccessTime}"
							Header="{Binding AlternateKey, RelativeSource={RelativeSource Self}, Converter={StaticResource AvailableColumnsToStringConverter}}">
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<TextBlock Text="{Binding LastAccessTime}" />
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</cap:AlternateGridViewColumn>
						<cap:AlternateGridViewColumn
							Width="200"
							AlternateKey="{x:Static enum:AvailableColumns.Resolution}"
							Header="{Binding AlternateKey, RelativeSource={RelativeSource Self}, Converter={StaticResource AvailableColumnsToStringConverter}}">
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<TextBlock Text="{Binding Resolution}" />
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</cap:AlternateGridViewColumn>
						<cap:AlternateGridViewColumn
							Width="200"
							AlternateKey="{x:Static enum:AvailableColumns.Location}"
							Header="{Binding AlternateKey, RelativeSource={RelativeSource Self}, Converter={StaticResource AvailableColumnsToStringConverter}}">
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<TextBlock Text="{Binding Location}" />
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</cap:AlternateGridViewColumn>
						<cap:AlternateGridViewColumn
							Width="200"
							AlternateKey="{x:Static enum:AvailableColumns.Rate}"
							Header="{Binding AlternateKey, RelativeSource={RelativeSource Self}, Converter={StaticResource AvailableColumnsToStringConverter}}">
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<TextBlock Text="{Binding Rate}" />
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</cap:AlternateGridViewColumn>
						<cap:AlternateGridViewColumn
							Width="200"
							AlternateKey="{x:Static enum:AvailableColumns.IsInvalid}"
							Header="{Binding AlternateKey, RelativeSource={RelativeSource Self}, Converter={StaticResource AvailableColumnsToStringConverter}}">
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<TextBlock Text="{Binding IsInvalid}" />
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</cap:AlternateGridViewColumn>
						<cap:AlternateGridViewColumn
							Width="200"
							AlternateKey="{x:Static enum:AvailableColumns.Tags}"
							Header="{Binding AlternateKey, RelativeSource={RelativeSource Self}, Converter={StaticResource AvailableColumnsToStringConverter}}">
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<ItemsControl ItemsSource="{Binding Tags}">
										<ItemsControl.ItemTemplate>
											<DataTemplate>
												<Button
													Margin="1"
													Command="{Binding DataContext.AlbumSelectorViewModel.SetTagAlbumToCurrentCommand, RelativeSource={RelativeSource AncestorType=Window}}"
													CommandParameter="{Binding}"
													Content="{Binding Path=., Mode=OneWay}" />
											</DataTemplate>
										</ItemsControl.ItemTemplate>
										<ItemsControl.ItemsPanel>
											<ItemsPanelTemplate>
												<WrapPanel />
											</ItemsPanelTemplate>
										</ItemsControl.ItemsPanel>
									</ItemsControl>
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</cap:AlternateGridViewColumn>
					</cap:AlternateGridViewColumnCollection>
				</cap:GridViewColumns.GridViewColumnTemplates>
			</GridView>
		</ListView.View>
		<ItemsControl.ItemContainerStyle>
			<Style BasedOn="{StaticResource StandardGridViewItem}" TargetType="ListViewItem">
				<Setter Property="ContextMenu" Value="{DynamicResource MediaFileListContextMenu}" />
				<Setter Property="BorderBrush" Value="{DynamicResource Brush.Common.Border.Normal}" />
				<Setter Property="BorderThickness" Value="0,0,0,1" />
				<Style.Triggers>
					<DataTrigger Binding="{Binding Exists}" Value="False">
						<Setter Property="cap:Helper.IsMasked" Value="True" />
					</DataTrigger>
				</Style.Triggers>
			</Style>
		</ItemsControl.ItemContainerStyle>
		<i:Interaction.Behaviors>
			<behaviors:DeviceEventBehaviorForUIElement
				KeyEventCommand="{Binding AlbumViewModel.GestureReceiver.KeyEventCommand}"
				MouseEventCommand="{Binding AlbumViewModel.GestureReceiver.MouseEventCommand}"
				MouseWheelEventCommand="{Binding AlbumViewModel.GestureReceiver.MouseWheelEventCommand}" />
		</i:Interaction.Behaviors>
	</controls:TwoWayBindableSelectedItemsMediaListView>
</UserControl>
