using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

using Reactive.Bindings;

using SandBeige.MediaBox.Composition.Interfaces.Models.Media;
using SandBeige.MediaBox.Composition.Objects;
using SandBeige.MediaBox.DataBase.Tables;
using SandBeige.MediaBox.DataBase.Tables.Metadata;
using SandBeige.MediaBox.Library.Extensions;
using SandBeige.MediaBox.TestUtilities.MockCreator;

namespace SandBeige.MediaBox.TestUtilities {
	public static class DatabaseUtility {
		public static IMediaFileModel ToModel(this MediaFile mediaFile) {
			var mock = ModelMockCreator.CreateMediaFileModelMock();
			mock.SetupAllProperties();
			mock.Setup(m => m.MediaFileId).Returns(mediaFile.MediaFileId);
			mock.Setup(m => m.Exists).Returns(File.Exists(mediaFile.FilePath));
			mock.Setup(m => m.FilePath).Returns(mediaFile.FilePath);
			if (mediaFile.Latitude is { } latitude && mediaFile.Longitude is { } longitude) {
				mock.Setup(m => m.Location).Returns(new GpsLocation(latitude, longitude, mediaFile.Altitude));
			} else {
				mock.Setup(m => m.Location).Returns(null as GpsLocation);
			}
			mock.Setup(m => m.Rate).Returns(mediaFile.Rate);
			mock.Setup(m => m.Resolution).Returns(new ComparableSize(mediaFile.Width, mediaFile.Height));
			var tagRc = new ReactiveCollection<string>();
			tagRc.AddRange(mediaFile.MediaFileTags.Select(x => x.Tag.TagName));
			mock.Setup(m => m.Tags).Returns(tagRc);
			return mock.Object;
		}

		public static MediaFile CreateMediaFileRecord(
			long mediaFileId,
			string directoryPath = "",
			string filePath = "",
			string? thumbnailFileName = null,
			double? latitude = null,
			double? longitude = null,
			double? altitude = null,
			long fileSize = 0,
			int rate = 0,
			int width = 0,
			int height = 0,
			string? hash = null,
			bool isInvalid = false,
			bool isAutoGeneratedThumbnail = false,
			ICollection<AlbumMediaFile>? albumMediaFiles = null,
			ICollection<MediaFileTag>? mediaFileTags = null,
			VideoFile? videoFile = null,
			ImageFile? imageFile = null,
			Position? position = null,
			Jpeg? jpeg = null,
			Png? png = null,
			Bmp? bmp = null,
			Gif? gif = null,
			Heif? heif = null
			) {
			albumMediaFiles ??= Array.Empty<AlbumMediaFile>();
			mediaFileTags ??= Array.Empty<MediaFileTag>();
			return new MediaFile {
				MediaFileId = mediaFileId,
				DirectoryPath = directoryPath,
				FilePath = filePath,
				ThumbnailFileName = thumbnailFileName,
				Latitude = latitude,
				Longitude = longitude,
				Altitude = altitude,
				FileSize = fileSize,
				Rate = rate,
				Width = width,
				Height = height,
				Hash = hash,
				IsInvalid = isInvalid,
				IsAutoGeneratedThumbnail = isAutoGeneratedThumbnail,
				AlbumMediaFiles = albumMediaFiles,
				MediaFileTags = mediaFileTags,
				VideoFile = videoFile,
				ImageFile = imageFile,
				Position = position,
				Jpeg = jpeg,
				Png = png,
				Bmp = bmp,
				Gif = gif,
				Heif = heif
			};
		}
	}
	public enum SubTable {
		None,
		Image,
		Video,
		Jpeg,
		Png
	}
}
